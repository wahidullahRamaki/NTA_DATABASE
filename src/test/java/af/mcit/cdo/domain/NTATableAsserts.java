package af.mcit.cdo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class NTATableAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNTATableAllPropertiesEquals(NTATable expected, NTATable actual) {
        assertNTATableAutoGeneratedPropertiesEquals(expected, actual);
        assertNTATableAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNTATableAllUpdatablePropertiesEquals(NTATable expected, NTATable actual) {
        assertNTATableUpdatableFieldsEquals(expected, actual);
        assertNTATableUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNTATableAutoGeneratedPropertiesEquals(NTATable expected, NTATable actual) {
        assertThat(expected)
            .as("Verify NTATable auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNTATableUpdatableFieldsEquals(NTATable expected, NTATable actual) {
        assertThat(expected)
            .as("Verify NTATable relevant properties")
            .satisfies(e -> assertThat(e.getFullName()).as("check fullName").isEqualTo(actual.getFullName()))
            .satisfies(e -> assertThat(e.getFatherName()).as("check fatherName").isEqualTo(actual.getFatherName()))
            .satisfies(e -> assertThat(e.getJobTitle()).as("check jobTitle").isEqualTo(actual.getJobTitle()))
            .satisfies(e -> assertThat(e.getStep()).as("check step").isEqualTo(actual.getStep()))
            .satisfies(e -> assertThat(e.getEducationDegree()).as("check educationDegree").isEqualTo(actual.getEducationDegree()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getSalary()).as("check salary").isEqualTo(actual.getSalary()))
            .satisfies(e -> assertThat(e.getSignature()).as("check signature").isEqualTo(actual.getSignature()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNTATableUpdatableRelationshipsEquals(NTATable expected, NTATable actual) {}
}
